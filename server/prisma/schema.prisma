// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Categories {
  CatID       String        @id @default(cuid())
  Categorie   String
  CreatedAt   DateTime      @default(now())
  UpdatedAt   DateTime      @updatedAt
  Nationalits Nationalits[]
}


model Nationalits {
  NatID       String      @id @default(cuid())
  Nationality String
  CatID       String
  UserID      String
  Exist       Boolean
  CreatedAt   DateTime    @default(now())
  UpdatedAt   DateTime    @updatedAt
  Customers   Customers[]
  Categorie   Categories  @relation(fields: [CatID], references: [CatID])
  User        Users       @relation(fields: [UserID], references: [UserID])
}

model Customers {
  CustID         String          @id
  Customer       String
  NatID          String
  passportNumber String?
  ExpDate        String?
  ReleasePlace   String?
  NationalNumber String?
  Address        String?
  Phone          String?
  UserID         String
  Exist          Boolean
  OperDate       DateTime        @default(now())
  CustomerType   Boolean?
  Buys           Buys[]
  Nationality    Nationalits     @relation(fields: [NatID], references: [NatID])
  User           Users           @relation(fields: [UserID], references: [UserID])
  Sales          Sales[]
  PassportDocuments CustomerPassportDocuments[]

  @@index([Exist])
  @@index([Customer])
  @@index([NatID])
}


model Carrences {
  CarID             String              @id @default(cuid())
  Carrency          String
  CarrencyCode      String
  Balance           Decimal             @db.Decimal(18, 3)
  UserID            String
  Exist             Boolean
  CreatedAt         DateTime            @default(now())
  UpdatedAt         DateTime            @updatedAt
  User              Users               @relation(fields: [UserID], references: [UserID])
  Buys              Buys[]
  TreasuryMovements TreasuryMovements[]
  Sales             Sales[]
  Debts             Debts[]
}


model Buys {
  BuyID      String    @id
  BillNum    String
  CarID      String
  Value      Decimal   @db.Decimal(18, 3)
  BuyPrice   Decimal   @db.Decimal(18, 3)
  TotalPrice Decimal   @db.Decimal(18, 3)
  CustID     String
  FirstNum   String?
  LastNum    String?
  BuyDate    DateTime  @default(now())
  UserID     String
  Exist      Boolean
  OperDate   DateTime  @default(now())
  User       Users     @relation(fields: [UserID], references: [UserID])
  Carrence   Carrences @relation(fields: [CarID], references: [CarID])
  Customer   Customers @relation(fields: [CustID], references: [CustID])

  @@index([Exist, BuyDate])
  @@index([CustID, Exist])
  @@index([BillNum])
  @@index([CarID])
}

model TreasuryMovements {
  TreaMoveID   String    @id
  CarID        String
  OpenBalance  Decimal   @db.Decimal(18, 3)
  Cridit       Decimal   @db.Decimal(18, 3)
  Debit        Decimal   @db.Decimal(18, 3)
  FinalBalance Decimal   @db.Decimal(18, 3)
  Statment     String
  UserID       String
  Exist        Boolean
  OperDate     DateTime  @default(now())
  Carrence     Carrences @relation(fields: [CarID], references: [CarID])
  User         Users     @relation(fields: [UserID], references: [UserID])
}

model Sales {
  SaleID     String    @id
  BillNum    String
  CustID     String
  CarID      String
  SalePrice  Decimal   @db.Decimal(18, 3)
  FirstNum   String?
  LastNum    String?
  Value      Decimal   @db.Decimal(18, 3)
  TotalPrice Decimal   @db.Decimal(18, 3)
  SaleDate   DateTime  @default(now())
  UserID     String
  Exist      Boolean
  OperDate   DateTime  @default(now())
  Carrence   Carrences @relation(fields: [CarID], references: [CarID])
  User       Users     @relation(fields: [UserID], references: [UserID])
  Customer   Customers @relation(fields: [CustID], references: [CustID])

  @@index([Exist, SaleDate])
  @@index([CustID, Exist])
  @@index([BillNum])
  @@index([CarID])
}

model ExpenseItems {
  ExpItemID       String            @id
  ExpItem         String
  UserID          String
  Exist           Boolean
  OperDate        DateTime          @default(now())
  User            Users             @relation(fields: [UserID], references: [UserID])
  ExpanseAccounts ExpanseAccounts[]
}

model ExpanseAccounts {
  ExpAccId    String       @id
  ExpItemID   String
  ExpValue    Decimal      @db.Decimal(18, 3)
  Statment    String?
  UserID      String
  Exist       Boolean
  OperDate    DateTime     @default(now())
  User        Users        @relation(fields: [UserID], references: [UserID])
  ExpenseItem ExpenseItems @relation(fields: [ExpItemID], references: [ExpItemID])
}

model Debts {
  DebtID       String    @id @default(cuid())
  DebtType     String    // "TAKEN" or "GIVEN"
  DebtorName   String    // Name of person/company
  DebtorPhone  String?   // Phone number
  DebtorAddress String?  // Address
  CarID        String    // Currency ID
  Amount       Decimal   @db.Decimal(18, 4)
  PaidAmount   Decimal   @default(0) @db.Decimal(18, 4) // Total amount paid so far
  RemainingAmount Decimal @db.Decimal(18, 4) // Remaining amount to be paid
  Description  String?   // Description/notes
  DebtDate     DateTime  @default(now())
  Status       String    @default("ACTIVE") // "ACTIVE", "PARTIAL", "PAID", "RECEIVED"
  UserID       String
  Exist        Boolean   @default(true)
  CreatedAt    DateTime  @default(now())
  UpdatedAt    DateTime  @updatedAt
  
  // Relations
  User         Users     @relation(fields: [UserID], references: [UserID])
  Currency     Carrences @relation(fields: [CarID], references: [CarID])
  Payments     DebtPayments[]

  @@index([Exist, Status])
  @@index([DebtType, Exist])
  @@index([DebtorName])
  @@index([CarID])
  @@index([RemainingAmount])
}

model DebtPayments {
  PaymentID    String    @id @default(cuid())
  DebtID       String    // Reference to the debt
  Amount       Decimal   @db.Decimal(18, 4) // Payment amount
  PaymentDate  DateTime  @default(now())
  PaymentType  String    // "PAYMENT" or "RECEIPT" (based on debt type)
  Description  String?   // Payment description/notes
  UserID       String    // User who recorded the payment
  Exist        Boolean   @default(true)
  CreatedAt    DateTime  @default(now())
  UpdatedAt    DateTime  @updatedAt
  
  // Relations
  Debt         Debts     @relation(fields: [DebtID], references: [DebtID])
  User         Users     @relation(fields: [UserID], references: [UserID])
}

model CustomerPassportDocuments {
  DocumentID   String    @id @default(cuid())
  CustID       String    // Reference to customer
  DocumentType String    // "PASSPORT_IMAGE" or "PASSPORT_PDF"
  FileName     String    // Original file name
  FilePath     String    // Path where file is stored
  FileSize     Int       // File size in bytes
  MimeType     String    // MIME type (image/jpeg, image/png, application/pdf, etc.)
  Description  String?   // Optional description
  UploadDate   DateTime  @default(now())
  UserID       String    // User who uploaded the document
  Exist        Boolean   @default(true)
  CreatedAt    DateTime  @default(now())
  UpdatedAt    DateTime  @updatedAt
  
  // Relations
  Customer     Customers @relation(fields: [CustID], references: [CustID])
  User         Users     @relation(fields: [UserID], references: [UserID])
}

model Users {
  UserID       String    @id @default(cuid())
  UserName     String    @unique
  Password     String    // سيتم تشفيرها باستخدام bcrypt
  FullName     String
  Email        String?   @unique
  Phone        String?
  RoleID       String    // معرف الدور
  IsActive     Boolean   @default(true)
  LastLogin    DateTime? // آخر تسجيل دخول
  PasswordChangedAt DateTime? // تاريخ آخر تغيير لكلمة المرور
  LoginAttempts Int      @default(0) // عدد محاولات تسجيل الدخول الفاشلة
  LockedUntil  DateTime? // قفل الحساب حتى تاريخ معين
  CreatedAt    DateTime  @default(now())
  UpdatedAt    DateTime  @updatedAt

  // Relations
  Role         UserRoles @relation(fields: [RoleID], references: [RoleID])
  Sessions     UserSessions[]
  Customers    Customers[]
  Nationalits  Nationalits[]
  Carrences    Carrences[]
  Buys         Buys[]
  Sales        Sales[]
  Debts        Debts[]
  TreasuryMovements TreasuryMovements[]
  ExpenseItems ExpenseItems[]
  ExpanseAccounts ExpanseAccounts[]
  DebtPayments DebtPayments[]
  CustomerPassportDocuments CustomerPassportDocuments[]
}

model UserRoles {
  RoleID      String    @id @default(cuid())
  RoleName    String    @unique // اسم الدور (admin, manager, cashier, accountant)
  DisplayName String    // الاسم المعروض باللغة العربية
  Permissions Json      // الصلاحيات كـ JSON array
  Description String?   // وصف الدور
  IsActive    Boolean   @default(true)
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @updatedAt
  
  // Relations
  Users       Users[]
}

model UserSessions {
  SessionID   String    @id @default(cuid())
  UserID      String    // معرف المستخدم
  Token       String    @unique // JWT token
  ExpiresAt   DateTime  // تاريخ انتهاء الجلسة
  IsActive    Boolean   @default(true)
  IPAddress   String?   // عنوان IP
  UserAgent   String?   // معلومات المتصفح
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @updatedAt
  
  // Relations
  User        Users     @relation(fields: [UserID], references: [UserID])
}
